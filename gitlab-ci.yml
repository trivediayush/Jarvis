stages:
  - build
  - test
  - deploy

image: docker:latest

services:
  - docker:dind

variables:
  IMAGE_NAME: "ayusht45cyber/jarvis-assistant"
  IMAGE_TAG: "latest"
  DOCKER_TLS_CERTDIR: ""

# ✅ Build Job
build_job:
  stage: build
  script:
    - echo "Building the Docker image..."
    - docker build -t "$IMAGE_NAME:$IMAGE_TAG" .
    - docker save -o image.tar "$IMAGE_NAME:$IMAGE_TAG"
  artifacts:
    paths:
      - image.tar  # Ensures the image is available in the test and deploy stages


# ✅ Test Job - Verify dependencies
test_dependencies:
  stage: test
  script:
    - echo "Testing Python dependencies..."
    
    # Load the Docker image
    - echo "Loading the Docker image..."
    - docker load -i image.tar
    
    # Run a test to check if gTTS is properly installed
    - echo "Checking gTTS module..."
    - docker run --rm "$IMAGE_NAME:$IMAGE_TAG" python -c "from gtts import gTTS; print('gTTS imported successfully')"
    
    # Run a test to check if pyttsx3 is properly installed
    - echo "Checking pyttsx3 module..."
    - docker run --rm "$IMAGE_NAME:$IMAGE_TAG" python -c "import pyttsx3; print('pyttsx3 imported successfully')"

# ✅ Test Job - Test client.py
test_job_client:
  stage: test
  script:
    - echo "Testing client.py functionality..."
    
    # Load the Docker image
    - echo "Loading the Docker image..."
    - docker load -i image.tar
    
    # Run the simple client test
    - echo "Running client.py..."
    - docker run --rm "$IMAGE_NAME:$IMAGE_TAG" python /app/client.py > output.txt
    
    # Display the output
    - echo "Command output:"
    - cat output.txt
    
    # Check if the response contains expected output
    - grep -q "Hello from Jarvis" output.txt || exit 1

# ✅ Deploy Job
deploy_job:
  stage: deploy
  script:
    - echo "Logging into Docker Hub..."
    - echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin || exit 1
    - echo "Loading Docker image..."
    - docker load -i image.tar
    - echo "Pushing Docker image..."
    - docker push "$IMAGE_NAME:$IMAGE_TAG" || exit 1